rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if file is an image
    function isImage() {
      return request.resource.contentType.matches('image/.*');
    }

    // Helper function to check if file is a document
    function isDocument() {
      return request.resource.contentType.matches('application/.*') ||
             request.resource.contentType.matches('text/.*');
    }

    // Helper function to check file size (max 10MB)
    function isUnderSizeLimit() {
      return request.resource.size < 10 * 1024 * 1024;
    }

    // Photos directory - allow authenticated users to upload photos
    match /photos/{filename} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && 
        isImage() && 
        isUnderSizeLimit();
    }

    // User-specific directories
    match /users/{userId}/{allPaths=**} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && 
        request.auth.uid == userId && 
        isUnderSizeLimit();
    }

    // Profile pictures
    match /users/{userId}/profile/{extension} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && 
        request.auth.uid == userId && 
        isImage() && 
        isUnderSizeLimit();
      allow delete: if isAuthenticated() && 
        request.auth.uid == userId;
    }

    // Chat attachments
    match /chats/{chatId}/attachments/{fileName} {
      allow read: if isAuthenticated() && 
        (resource.metadata.senderId == request.auth.uid || 
         resource.metadata.receiverId == request.auth.uid);
      
      allow create: if isAuthenticated() && 
        isUnderSizeLimit() && 
        (isImage() || isDocument()) &&
        request.resource.metadata.senderId == request.auth.uid;
      
      allow delete: if isAuthenticated() && 
        resource.metadata.senderId == request.auth.uid;
    }

    // Profile images
    match /profiles/{userId}/profile/{filename} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && 
        request.auth.uid == userId && 
        isImage() && 
        isUnderSizeLimit();
    }

    match /users/{userId}/photos/{photoId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.auth.uid == userId;
    }

    match /test-uploads/{filename} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
    }

    // Default rule for other paths
    match /{allPaths=**} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
    }
  }
} 